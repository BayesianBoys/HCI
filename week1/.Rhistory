ggplot(aes(x = estimate, xmin = lower, xmax = upper, y = seed)) +
geom_vline(xintercept = c(0, .5), color = "white") +
geom_pointrange() +
labs(x = expression(beta[1]),
y = "seed #") +
xlim(0, 1)
set.seed(1)
s3 %>%
sample_n(1) %>%
mutate(seed = seed %>% as.character()) %>%
ggplot(aes(x = estimate, y = seed)) +
geom_vline(xintercept = c(0, .5), color = "white") +
geom_pointrange() +
labs(x = expression(beta[1]),
y = "seed #") +
xlim(0, 1)
set.seed(1)
s3 %>%
sample_n(1) %>%
mutate(seed = seed %>% as.character()) %>%
ggplot(aes(x = estimate, xmin = lower, xmax = upper, y = seed, ymax = 1, ymin = 0)) +
geom_vline(xintercept = c(0, .5), color = "white") +
geom_pointrange() +
labs(x = expression(beta[1]),
y = "seed #") +
xlim(0, 1)
set.seed(1)
s3 %>%
sample_n(1) %>%
mutate(seed = seed %>% as.character()) %>%
ggplot(aes(x = estimate, xmin = lower, xmax = upper, y = seed, ymax = 1, ymin = 1)) +
geom_vline(xintercept = c(0, .5), color = "white") +
geom_pointrange() +
labs(x = expression(beta[1]),
y = "seed #") +
xlim(0, 1)
set.seed(1)
s3 %>%
sample_n(1) %>%
mutate(seed = seed %>% as.character()) %>%
ggplot(aes(x = estimate, xmin = lower, xmax = upper, y = seed, ymax = 2, ymin = 0)) +
geom_vline(xintercept = c(0, .5), color = "white") +
geom_pointrange() +
labs(x = expression(beta[1]),
y = "seed #") +
xlim(0, 1)
s3 %>%
mutate(check = ifelse(width < .7, 1, 0)) %>%
summarise(`width power` = mean(check))
s3 %>%
summarise(`average width` = mean(width))
s4 <-
tibble(seed = 1:n_sim) %>%
mutate(tidy = map(seed, sim_d_and_fit, n = 75)) %>%
unnest(tidy) %>%
mutate(width = upper - lower)
s4 %>%
ggplot(aes(x = reorder(seed, lower), y = estimate, ymin = lower, ymax = upper)) +
geom_hline(yintercept = c(0, .5), color = "white") +
geom_pointrange(fatten = 1/2) +
scale_x_discrete("reordered by the lower level of the 95% intervals", breaks = NULL) +
ylab(expression(beta[1])) +
# this kept the scale on the y-axis the same as the simulation with n = 50
coord_cartesian(ylim = c(-.5, 1.3))
s4 %>%
mutate(check = ifelse(width < .7, 1, 0)) %>%
summarise(`proportion below 0.7` = mean(check),
`average width`        = mean(width))
s5 <-
tibble(seed = 1:n_sim) %>%
mutate(tidy = map(seed, sim_d_and_fit, n = 85)) %>%
unnest(tidy) %>%
mutate(width = upper - lower)
s5 <-
tibble(seed = 1:n_sim) %>%
mutate(tidy = map(seed, sim_d_and_fit, n = 85)) %>%
unnest(tidy) %>%
mutate(width = upper - lower)
library(pacman)
p_load(tidyverse, brms, broom)
stanvar((lambda * (-x^beta), name = "my_beta")
stanvars <-
stanvar(x^alpha, name = "positive") +
stanvar((lambda * (-x^beta), name = "my_beta"))
stanvars <-
stanvar(x^alpha, name = "positive") +
stanvar((lambda * (-x^beta), name = "negative"))
stanvars <-
stanvar(x^alpha, name = "positive") +
stanvar((lambda * -x^beta), name = "negative")
x = 4
stanvars <-
stanvar(x^alpha, name = "positive") +
stanvar((lambda * -x^beta), name = "negative")
4^5
stanvars <-
stanvar(x^my_alpha, name = "positive") +
stanvar((lambda * -x^my_beta), name = "negative")
x = 4
stanvars <-
stanvar(x^my_alpha, name = "positive") +
stanvar((lambda * -x^my_beta), name = "negative")
V = bf(y ~ fun(alpha, beta, lambda),
alpha ~ 1 + x
beta ~ 1 + x
lambda ~ 1 + x)
V = bf(y ~ fun(alpha, beta, lambda),
alpha ~ 1 + x
beta ~ 1 + x
lambda ~ 1 + x)
formula = bf(
y ~ fun(alpha, beta, lambda),
alpha ~ 1 + x,
beta ~ 1 + x,
lambda ~ 1 + x)
formula = bf(
y ~ fun(alpha, beta, lambda),
alpha ~ fun(bing, bong),
beta ~ 1 + x,
lambda ~ 1 + x,
bing ~ 1 + x
bong ~ 1 + x)
formula = bf(
y ~ fun(alpha, beta, lambda),
alpha ~ fun(bing, bong),
beta ~ 1 + x,
lambda ~ 1 + x,
bing ~ 1 + x,
bong ~ 1 + x)
library(pacman)
p_load(tidyverse, brms, broom)
formula = bf(
y ~ fun(alpha, beta, lambda),
alpha ~ fun(bing, bong),
beta ~ 1 + x,
lambda ~ 1 + x,
bing ~ 1 + x,
bong ~ 1 + x)
formula = bf(
y ~ fun(alpha, beta, lambda),
alpha ~ fun(bing, bong),
beta ~ 1 + x,
lambda ~ 1 + x,
bing ~ tommy,
bong ~ 1 + x)
#Set your WD here:
setwd("C:/Users/Mikkel/Documents/UNI/masters/HCI/Eye tracking task/Eye tracking task")
df <- read.csv("clean_data.csv")
df$website <- as.factor(df$website)
df$event <- as.factor(df$event)
df$name <- as.factor(df$name)
View(df)
ggplot(df%>% filter(event == "fixation"), aes(website, x, color = website)) +
geom_point() +
geom_violin()
pacman::p_load(tidyverse, lmerTest)
#Set your WD here:
setwd("C:/Users/Mikkel/Documents/UNI/masters/HCI/Eye tracking task/Eye tracking task")
df <- read.csv("clean_data.csv")
df$website <- as.factor(df$website)
df$event <- as.factor(df$event)
df$name <- as.factor(df$name)
ggplot(df%>% filter(event == "fixation"), aes(website, x, color = website)) +
geom_point() +
geom_violin()
ggplot(df%>% filter(event == "fixation"), aes(website, y, color = website)) +
geom_point() +
geom_violin()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point() +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
# geom_point(alpha = 0.2) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.2) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
# geom_point(alpha = 0.2) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, fill = website)) +
# geom_point(alpha = 0.2) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
# geom_point(alpha = 0.2) +
geom_density2d()
df_cor = df %>%
select(!c(name, age, order_tickets_online, website, event))
p_load(corrplot)
library(pacman)
p_load(corrplot)
M = cor(df_cor)
corplot(M, method = "circle")
corrplot(M, method = "circle")
#Set your WD here:
setwd("C:/Users/Mikkel/Documents/UNI/masters/HCI/Eye tracking task/Eye tracking task")
df <- read.csv("clean_data.csv")
df$website <- as.factor(df$website)
df$event <- as.factor(df$event)
df$name <- as.factor(df$name)
## CLEANING AND PROCESSING HERE - if needed ##
summary(df$website)
summary(df$name)
### BAYESIAN NEEDS 0's AND 1'S ###
df <- df %>%
mutate(event_num = factor(ifelse(event == "fixation", 1, 0)),
website_num = ifelse(website == "nfbio", 1, 0),
velocity_log = velocity + 0.00001)
df_mean_vel = df %>%
select(name, event, website, center_mean) %>%
group_by(name, event, website) %>%
summarize(mean_vel = mean(center_mean), n = n())
df_outlier = df %>%
filter(event_d < 20000)
df_time = df %>%
group_by(name, website_num) %>%
summarise(time_max = max(timestep)) %>%
glimpse()
df_cor = df %>%
select(!c(name, age, order_tickets_online, website, event))
library(pacman)
p_load(corrplot)
M = cor(df_cor)
corrplot(M, method = "circle")
View(df)
View(df_cor)
M = cor(df_cor)
df_cor = df %>%
select(!c(name, age, order_tickets_online, website, event))
M = cor(df_cor)
summary(df_cor)
M = cor(df_cor)
dtypes(df_cor)
dtype(df_cor)
str(df_cor)
df_cor = df %>%
select(!c(name, age, order_tickets_online, website, event, event_num))
library(pacman)
p_load(corrplot)
M = cor(df_cor)
corrplot(M, method = "circle")
corrplot(M, method = "circle", type = "upper")
corrplot(M, method = "number", type = "upper")
circle
corrplot(M, method = "circle", type = "upper")
ggplot(df, aes(event, velocity, color = order_tickets_online)) +
geom_point() +
geom_smooth()
ggplot(df, aes(order_tickets_online, velocity, fill = website)) +
geom_point() +
geom_violin()
ggplot(df, aes(order_tickets_online, velocity, color = website)) +
geom_point() +
geom_violin()
ggplot(df, aes(order_tickets_online, velocity, fill = website)) +
geom_point() +
geom_violin()
ggplot(df %>% filter(event == "fixation"), aes(event, center_mean, color = website)) +
geom_point()+
geom_violin()
corrplot(M, method = "circle")
## CLEANING AND PROCESSING HERE - if needed ##
summary(df$website)
summary(df$name)
### BAYESIAN NEEDS 0's AND 1'S ###
df <- df %>%
mutate(event_num = factor(ifelse(event == "fixation", 1, 0)),
website_num = ifelse(website == "nfbio", 1, 0),
velocity_log = velocity + 0.00001)
df_mean_vel = df %>%
select(name, event, website, center_mean) %>%
group_by(name, event, website) %>%
summarize(mean_vel = mean(center_mean), n = n())
df_outlier = df %>%
filter(event_d < 20000)
df_time = df %>%
group_by(name, website_num) %>%
summarise(time_max = max(timestep)) %>%
glimpse()
df_cor = df %>%
select(!c(name, age, order_tickets_online, website, event, event_num))
library(pacman)
p_load(corrplot)
M = cor(df_cor)
corrplot(M, method = "circle", type = "upper")
# Here is a prelimniary model:
# 1. What is it asking?
# 2. How would you interpret these results?
# 3. How would you improve it?
m1 <- glmer(event ~ website + (1|name) + (1|cinemaxx_1st), df, family = binomial)
summary(m1)
m2 <- lmer(website_num ~ event_num + (1|name) + (1|cinemaxx_1st), df)
summary(m2)
m2 <- glmer(website ~ event_num + (1|name) + (1|cinemaxx_1st), df)
m2 <- glmer(website ~ event_num + (1|name) + (1|cinemaxx_1st), df)
m2 <- glmer(website_num ~ event_num + (1|name) + (1|cinemaxx_1st), df)
summary(m2)
ggplot(df %>% filter(event == "saccade"), aes(event, center_mean, color = website)) +
geom_point()+
geom_violin()
ggplot(df %>% filter(event == "saccade"), aes(event, event_d, color = website)) +
geom_point()+
geom_violin()
ggplot(df, aes(name, center_mean, color = website)) +
geom_point()+
geom_smooth()
ggplot(df_mean_vel, aes(website, mean_vel, colour = event)) +
geom_point() +
facet_wrap(~name)
lmer(mean_vel ~ event + website + (1|name), df_mean_vel)
ggplot(df_mean_vel, aes(website, n, color = event)) +
geom_point() +
facet_wrap(~name)
ggplot(df, aes(website, event_d, color = event))+
geom_point()+
geom_violin()
ggplot(df, aes(order_tickets_online, velocity, fill = website)) +
geom_point() +
geom_violin()
ggplot(df %>% filter(event == "fixation"), aes(event, center_mean, color = website)) +
geom_point()+
geom_violin()
ggplot(df %>% filter(event == "fixation"), aes(event, event_d, color = website)) +
geom_point()+
geom_violin()
ggplot(df %>% filter(event == "saccade"), aes(event, center_d, color = website)) +
geom_point()+
geom_violin()
ggplot(df %>% filter(event == "saccade"), aes(event, event_d, color = website)) +
geom_point()+
geom_violin()
ggplot(df_outlier, aes(website, event_d, color = event))+
geom_point()+
geom_violin()
ggplot(df%>%filter(event == "saccade"), aes(order_tickets_online, event_d, color = website)) +
geom_point() +
geom_violin()
ggplot(df%>%filter(event == "fixation"), aes(order_tickets_online, event_d, color = website)) +
geom_point() +
geom_violin()
ggplot(df_outlier%>%filter(event == "fixation"), aes(order_tickets_online, event_d, color = website)) +
geom_point() +
geom_violin()
ggplot(df%>% filter(event == "fixation"), aes(website, x, color = website)) +
geom_point() +
geom_violin()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d()
ggplot(df%>% filter(event == "saccade"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d()
ggplot(df, aes(mouse_x, mouse_y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d()
ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
geom_label(title("Tommy"))
p_load(cowplot)
ggplot(df, aes(mouse_x, mouse_y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
labs(title = "Mouse position")
fix = ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
labs(title = "Fixations")
mouse = ggplot(df, aes(mouse_x, mouse_y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
labs(title = "Mouse position")
p_load(cowplot)
plot_grid(fix, mouse)
plot_grid(fix, mouse, rows = 2)
setwd("~")
getwd()
pacman::p_load(tidyverse, lmerTest)
#Set your WD here:
setwd("C:/Users/Mikkel/Documents/UNI/masters/HCI/Eye tracking task/Eye tracking task")
df <- read.csv("clean_data.csv")
df$website <- as.factor(df$website)
df$event <- as.factor(df$event)
df$name <- as.factor(df$name)
# Chunk 1
# check that the relative path works boys.
setwd("~/HCI/week1")
pacman::p_load(tidyverse, lmerTest, corrplot)
# Chunk 2
#Set your WD here:
df <- read.csv("clean_data.csv") %>%
as_tibble() %>%
glimpse()
df <- df %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name),
order_tickets_online = as_factor(order_tickets_online),
session = as_factor(session),
cinemaxx_1st = as_factor(cinemaxx_1st)) %>%
glimpse()
# Chunk 3
# subset
df_cor <- df %>%
mutate(website_num = if_else(website == "cinemaxx", 0, 1)) %>%
select(!c(name, age, order_tickets_online,
website, event, session, cinemaxx_1st)) %>%
glimpse()
# correlation plot
M <- cor(df_cor)
corrplot(M, method = "square", type = "upper")
# Chunk 4
# preprocessing
df1 <- df %>%
mutate(event_re = forcats::fct_recode(event,
"0" = "fixation",
"1" = "saccade"),
event_num = as.numeric(event_re) - 1) %>%
group_by(session, website, name) %>%
mutate(n = row_number())
# more preprocessing
df2 <- df1 %>%
group_by(name, website,
grouping = with(rle(event_num) %>% set_names(c("lengths2", "values")),
rep(seq_along(lengths2), lengths2))) %>%
summarize(length = (max(n) - min(n) + 1),
type = max(event_num))
# last step
df3 <- df2 %>%
pivot_wider(names_from = type,
values_from = length) %>%
rename("fixation" = "0",
"saccade" = "1")
# more data wrangling needed.
fixation <- df3 %>%
filter(!is.na(fixation)) %>%
select(!saccade)
saccade <- df3 %>%
filter(!is.na(saccade)) %>%
mutate(grouping = grouping - 1) %>%
select(!fixation)
complete <- merge(fixation, saccade) %>%
mutate(website_num = as.numeric(forcats::fct_recode(
website,
"0" = "cinemaxx",
"1" = "nfbio")) - 1) %>%
glimpse()
# summary
d <- complete %>%
group_by(name, website_num) %>%
summarize(dur_fix_total = sum(fixation),
dur_sac_total = sum(saccade),
dur_total_frq = dur_fix_total/(dur_fix_total + dur_sac_total),
dur_fix_mean = mean(fixation),
dur_sac_mean = mean(saccade),
dur_mean_frq = dur_fix_mean/(dur_fix_mean+dur_sac_mean),
n_events = n()) %>%
glimpse()
# Chunk 5
# models with summary:
### number of fixations:
m_events <- lm(website_num ~ n_events,
data = d)
summary(m_events)
### fixation duration:
m_meanDur <- lm(website_num ~ dur_fix_mean + dur_sac_mean,
data = d)
summary(m_meanDur)
### fixation/saccade:
m_frq <- lm(website_num ~ dur_total_frq,
data = d)
summary(m_frq)
# Chunk 6
# scaling function (z)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# mouse velocity
mouse <- df %>%
mutate(lag_x = lag(mouse_x),
lag_y = lag(mouse_y)) %>%
filter(!is.na(lag_x), !is.na(lag_y)) %>%
mutate(vel_x = abs(mouse_x - lag_x),
vel_y = abs(mouse_y - lag_y),
mouse_vel = sqrt(vel_x^2 + vel_y^2),
mouse_scaled = scale_this(mouse_vel),
eye_scaled = scale_this(velocity)) %>%
glimpse()
# plot mouse velocity
mouse %>%
ggplot() +
geom_density(aes(x = mouse_vel))
# with logistic
velocity_log <- glmer(website ~ mouse_scaled + eye_scaled + (1|name),
family = binomial, data = mouse)
summary(velocity_log) # more cinemaxx for both mouse and eye velocity.
# Chunk 7
fix = ggplot(df%>% filter(event == "fixation"), aes(x, y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
labs(title = "Fixations")
mouse = ggplot(df, aes(mouse_x, mouse_y, color = website)) +
geom_point(alpha = 0.01) +
geom_density2d() +
labs(title = "Mouse position")
p_load(cowplot)
plot_grid(fix, mouse, nrow = 2)
